{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, retry } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RestApiService = /*#__PURE__*/(() => {\n  class RestApiService {\n    constructor(http) {\n      this.http = http; // Geoportal URLs\n\n      this.radiometryURL = \"https://sig.lneg.pt/server/rest/services/CartaRadiometrica/MapServer/identify\";\n      this.geologyURL = \"https://sig.lneg.pt/server/rest/services/CGP500k/MapServer/identify\";\n      this.addressURL = \"https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode\";\n      this.googleURl = \"https://maps.googleapis.com/maps/api/geocode/json\";\n      this.elevationURL = \"https://api.open-elevation.com/api/v1/lookup\";\n      this.APIKEY = \"AIzaSyBhpME8DXkR08-Pk84hprnuOFIOCB0-bIg\";\n    } // Get Radiometric value\n\n\n    getRadiometry(x, y, xinf, yinf, xsup, ysup) {\n      let params = new HttpParams();\n      params = params.append('f', 'json');\n      params = params.append('returnField', 'false');\n      params = params.append('returnGeometry', 'false');\n      params = params.append('returnUnformattedValues', 'false');\n      params = params.append('returnZ', 'false');\n      params = params.append('tolerance', '3');\n      params = params.append('imageDisplay', '978,579,96');\n      params = params.append('geometry', '{\"x\":' + x + ',\"y\":' + y + '}');\n      params = params.append('geometryType', 'esriGeometryPoint');\n      params = params.append('sr', '102100');\n      params = params.append('mapExtent', xinf + ',' + yinf + ',' + xsup + ',' + ysup);\n      params = params.append('layers', 'visible');\n      return this.http.get(this.radiometryURL, {\n        params: params\n      }).pipe(retry(1), catchError(this.handleError));\n    } // Get Radiometric value\n\n\n    getGeology(x, y, xinf, yinf, xsup, ysup) {\n      let params = new HttpParams();\n      params = params.append('f', 'json');\n      params = params.append('returnField', 'false');\n      params = params.append('returnGeometry', 'false');\n      params = params.append('returnUnformattedValues', 'false');\n      params = params.append('returnZ', 'false');\n      params = params.append('tolerance', '3');\n      params = params.append('imageDisplay', '978,579,96');\n      params = params.append('geometry', '{\"x\":' + x + ',\"y\":' + y + '}');\n      params = params.append('geometryType', 'esriGeometryPoint');\n      params = params.append('sr', '102100');\n      params = params.append('mapExtent', xinf + ',' + yinf + ',' + xsup + ',' + ysup);\n      params = params.append('layers', 'visible');\n      return this.http.get(this.geologyURL, {\n        params: params\n      }).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getGeocode(address) {\n      let params = new HttpParams();\n      params = params.append('address', address);\n      params = params.append('key', this.APIKEY);\n      return this.http.get(this.googleURl, {\n        params\n      }).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getElevation(lon, lat) {\n      let params = new HttpParams();\n      params = params.append('locations', lat + ',' + lon);\n      return this.http.get(this.elevationURL, {\n        params\n      }).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getAddress(x, y) {\n      let params = new HttpParams();\n      params = params.append('f', 'json');\n      params = params.append('featureTypes', '');\n      params = params.append('location', x + ',' + y);\n      params = params.append('wkid', '4326');\n      return this.http.get(this.addressURL, {\n        params: params\n      }).pipe(retry(1), catchError(this.handleError));\n    }\n\n    handleError(error) {\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      } else {\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      window.alert(errorMessage);\n      return throwError(errorMessage);\n    }\n\n  }\n\n  RestApiService.ɵfac = function RestApiService_Factory(t) {\n    return new (t || RestApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  RestApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestApiService,\n    factory: RestApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return RestApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}