{"ast":null,"code":"/**\n * @module ol/control/MousePosition\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport Control from './Control.js';\nimport EventType from '../pointer/EventType.js';\nimport { get as getProjection, getTransformFromProjections, getUserProjection, identityTransform } from '../proj.js';\nimport { listen } from '../events.js';\n/**\n * @type {string}\n */\n\nvar PROJECTION = 'projection';\n/**\n * @type {string}\n */\n\nvar COORDINATE_FORMAT = 'coordinateFormat';\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', Return>} MousePositionOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string|boolean} [placeholder] Markup to show when the mouse position is not\n * available (e.g. when the pointer leaves the map viewport).  By default, a non-breaking space\n * is rendered when the mouse leaves the viewport.  To render something else, provide a string\n * to be used as the text content (e.g. 'no position' or '' for an empty string).  Set the placeholder\n * to `false` to retain the last position when the mouse leaves the viewport.  In a future release, this\n * will be the default behavior.\n * @property {string} [undefinedHTML='&#160;'] This option is deprecated.  Use the `placeholder` option instead.\n */\n\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\n\nvar MousePosition =\n/** @class */\nfunction (_super) {\n  __extends(MousePosition, _super);\n  /**\n   * @param {Options} [opt_options] Mouse position options.\n   */\n\n\n  function MousePosition(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    var element = document.createElement('div');\n    element.className = options.className !== undefined ? options.className : 'ol-mouse-position';\n    _this = _super.call(this, {\n      element: element,\n      render: options.render,\n      target: options.target\n    }) || this;\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.on;\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {MousePositionOnSignature<void>}\n     */\n\n    _this.un;\n\n    _this.addChangeListener(PROJECTION, _this.handleProjectionChanged_);\n\n    if (options.coordinateFormat) {\n      _this.setCoordinateFormat(options.coordinateFormat);\n    }\n\n    if (options.projection) {\n      _this.setProjection(options.projection);\n    }\n    /**\n     * Change this to `false` when removing the deprecated `undefinedHTML` option.\n     * @type {boolean}\n     */\n\n\n    var renderOnMouseOut = true;\n    /**\n     * @type {string}\n     */\n\n    var placeholder = '&#160;';\n\n    if ('undefinedHTML' in options) {\n      // deprecated behavior\n      if (options.undefinedHTML !== undefined) {\n        placeholder = options.undefinedHTML;\n      }\n\n      renderOnMouseOut = !!placeholder;\n    } else if ('placeholder' in options) {\n      if (options.placeholder === false) {\n        renderOnMouseOut = false;\n      } else {\n        placeholder = String(options.placeholder);\n      }\n    }\n    /**\n     * @private\n     * @type {string}\n     */\n\n\n    _this.placeholder_ = placeholder;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.renderOnMouseOut_ = renderOnMouseOut;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.renderedHTML_ = element.innerHTML;\n    /**\n     * @private\n     * @type {?import(\"../proj/Projection.js\").default}\n     */\n\n    _this.mapProjection_ = null;\n    /**\n     * @private\n     * @type {?import(\"../proj.js\").TransformFunction}\n     */\n\n    _this.transform_ = null;\n    return _this;\n  }\n  /**\n   * @private\n   */\n\n\n  MousePosition.prototype.handleProjectionChanged_ = function () {\n    this.transform_ = null;\n  };\n  /**\n   * Return the coordinate format type used to render the current position or\n   * undefined.\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  MousePosition.prototype.getCoordinateFormat = function () {\n    return (\n      /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */\n      this.get(COORDINATE_FORMAT)\n    );\n  };\n  /**\n   * Return the projection that is used to report the mouse position.\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  MousePosition.prototype.getProjection = function () {\n    return (\n      /** @type {import(\"../proj/Projection.js\").default|undefined} */\n      this.get(PROJECTION)\n    );\n  };\n  /**\n   * @param {MouseEvent} event Browser event.\n   * @protected\n   */\n\n\n  MousePosition.prototype.handleMouseMove = function (event) {\n    var map = this.getMap();\n    this.updateHTML_(map.getEventPixel(event));\n  };\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n\n\n  MousePosition.prototype.handleMouseOut = function (event) {\n    this.updateHTML_(null);\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n\n\n  MousePosition.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n\n    if (map) {\n      var viewport = map.getViewport();\n      this.listenerKeys.push(listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this));\n\n      if (this.renderOnMouseOut_) {\n        this.listenerKeys.push(listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this));\n      }\n\n      this.updateHTML_(null);\n    }\n  };\n  /**\n   * Set the coordinate format type used to render the current position.\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  MousePosition.prototype.setCoordinateFormat = function (format) {\n    this.set(COORDINATE_FORMAT, format);\n  };\n  /**\n   * Set the projection that is used to report the mouse position.\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n\n\n  MousePosition.prototype.setProjection = function (projection) {\n    this.set(PROJECTION, getProjection(projection));\n  };\n  /**\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @private\n   */\n\n\n  MousePosition.prototype.updateHTML_ = function (pixel) {\n    var html = this.placeholder_;\n\n    if (pixel && this.mapProjection_) {\n      if (!this.transform_) {\n        var projection = this.getProjection();\n\n        if (projection) {\n          this.transform_ = getTransformFromProjections(this.mapProjection_, projection);\n        } else {\n          this.transform_ = identityTransform;\n        }\n      }\n\n      var map = this.getMap();\n      var coordinate = map.getCoordinateFromPixelInternal(pixel);\n\n      if (coordinate) {\n        var userProjection = getUserProjection();\n\n        if (userProjection) {\n          this.transform_ = getTransformFromProjections(this.mapProjection_, userProjection);\n        }\n\n        this.transform_(coordinate, coordinate);\n        var coordinateFormat = this.getCoordinateFormat();\n\n        if (coordinateFormat) {\n          html = coordinateFormat(coordinate);\n        } else {\n          html = coordinate.toString();\n        }\n      }\n    }\n\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n      this.element.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n  };\n  /**\n   * Update the projection. Rendering of the coordinates is done in\n   * `handleMouseMove` and `handleMouseUp`.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n\n\n  MousePosition.prototype.render = function (mapEvent) {\n    var frameState = mapEvent.frameState;\n\n    if (!frameState) {\n      this.mapProjection_ = null;\n    } else {\n      if (this.mapProjection_ != frameState.viewState.projection) {\n        this.mapProjection_ = frameState.viewState.projection;\n        this.transform_ = null;\n      }\n    }\n  };\n\n  return MousePosition;\n}(Control);\n\nexport default MousePosition; //# sourceMappingURL=MousePosition.js.map","map":null,"metadata":{},"sourceType":"module"}